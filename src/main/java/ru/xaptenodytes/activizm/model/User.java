package ru.xaptenodytes.activizm.model;

// Generated 01.06.2015 21:49:07 by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import ru.xaptenodytes.activizm.dao.RoleHome;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users", catalog = "activizm", uniqueConstraints = {
		@UniqueConstraint(columnNames = "cityId"),
		@UniqueConstraint(columnNames = "coordinatorId") })
public class User implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6084911543594310290L;
	
	private int userId;
	private Phone phones;
	private Schedulewithdate schedulewithdate;
	private Schedulewithweekdays schedulewithweekdays;
	private Usersubcommunity usersubcommunity;
	private String login;
	private String passwdHash;
	private String surname;
	private String name1;
	private String name2;
	private Date registrDate;
	private Date activateDate;
	private Date desactivateDate;
	private int coordinatorId;
	private Boolean status;
	private Integer cityId;
	private Integer districtId;
	private City cities;
	private Set<Userrole> userroleses = new HashSet<>(0);
	@JsonIgnore
	private boolean enabled;
	@JsonIgnore
	private boolean nonLocked;
	
	public User() {
	}

	public User(Phone phones, Schedulewithdate schedulewithdate,
			Schedulewithweekdays schedulewithweekdays,
			Usersubcommunity usersubcommunity, String login, String passwdHash,
			String surname, String name1, Date registrDate, int coordinatorId) {
		this.phones = phones;
		this.schedulewithdate = schedulewithdate;
		this.schedulewithweekdays = schedulewithweekdays;
		this.usersubcommunity = usersubcommunity;
		this.login = login;
		this.passwdHash = passwdHash;
		this.surname = surname;
		this.name1 = name1;
		this.registrDate = registrDate;
		this.coordinatorId = coordinatorId;
	}

	public User(Phone phones, Schedulewithdate schedulewithdate,
			Schedulewithweekdays schedulewithweekdays,
			Usersubcommunity usersubcommunity, String login, String passwdHash,
			String surname, String name1, String name2, Date registrDate,
			Date activateDate, Date desactivateDate, int coordinatorId,
			Boolean status, Integer cityId, Integer districtId, City cities,
			Set<Userrole> userroleses) {
		this.phones = phones;
		this.schedulewithdate = schedulewithdate;
		this.schedulewithweekdays = schedulewithweekdays;
		this.usersubcommunity = usersubcommunity;
		this.login = login;
		this.passwdHash = passwdHash;
		this.surname = surname;
		this.name1 = name1;
		this.name2 = name2;
		this.registrDate = registrDate;
		this.activateDate = activateDate;
		this.desactivateDate = desactivateDate;
		this.coordinatorId = coordinatorId;
		this.status = status;
		this.cityId = cityId;
		this.districtId = districtId;
		this.cities = cities;
		this.userroleses = userroleses;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "phones"))
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "userID", unique = true, nullable = false)
	public int getUserId() {
		return this.userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public Phone getPhones() {
		return this.phones;
	}

	public void setPhones(Phone phones) {
		this.phones = phones;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public Schedulewithdate getSchedulewithdate() {
		return this.schedulewithdate;
	}

	public void setSchedulewithdate(Schedulewithdate schedulewithdate) {
		this.schedulewithdate = schedulewithdate;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public Schedulewithweekdays getSchedulewithweekdays() {
		return this.schedulewithweekdays;
	}

	public void setSchedulewithweekdays(
			Schedulewithweekdays schedulewithweekdays) {
		this.schedulewithweekdays = schedulewithweekdays;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public Usersubcommunity getUsersubcommunity() {
		return this.usersubcommunity;
	}

	public void setUsersubcommunity(Usersubcommunity usersubcommunity) {
		this.usersubcommunity = usersubcommunity;
	}

	@Column(name = "email", nullable = false, length = 50)
	public String getLogin() {
		return this.login;
	}

	public void setLogin(String email) {
		this.login = email;
	}

	@Column(name = "passwdHash", nullable = false)
	public String getPassword() {
		return this.passwdHash;
	}

	public void setPassword(String passwdHash) {
		this.passwdHash = passwdHash;
	}

	@Column(name = "surname", nullable = false, length = 50)
	public String getSurname() {
		return this.surname;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	@Column(name = "name1", nullable = false, length = 50)
	public String getName1() {
		return this.name1;
	}

	public void setName1(String name1) {
		this.name1 = name1;
	}

	@Column(name = "name2", length = 50)
	public String getName2() {
		return this.name2;
	}

	public void setName2(String name2) {
		this.name2 = name2;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "registrDate", nullable = false, length = 19)
	public Date getRegistrDate() {
		return this.registrDate;
	}

	public void setRegistrDate(Date registrDate) {
		this.registrDate = registrDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "activateDate", length = 19)
	public Date getActivateDate() {
		return this.activateDate;
	}

	public void setActivateDate(Date activateDate) {
		this.activateDate = activateDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "desactivateDate", length = 19)
	public Date getDesactivateDate() {
		return this.desactivateDate;
	}

	public void setDesactivateDate(Date desactivateDate) {
		this.desactivateDate = desactivateDate;
	}

	@Column(name = "coordinatorId", unique = true, nullable = false)
	public int getCoordinatorId() {
		return this.coordinatorId;
	}

	public void setCoordinatorId(int coordinatorId) {
		this.coordinatorId = coordinatorId;
	}

	@Column(name = "STATUS")
	public Boolean getStatus() {
		return this.status;
	}

	public void setStatus(Boolean status) {
		this.status = status;
	}

	@Column(name = "cityId", unique = true)
	public Integer getCityId() {
		return this.cityId;
	}

	public void setCityId(Integer cityId) {
		this.cityId = cityId;
	}

	@Column(name = "districtId")
	public Integer getDistrictId() {
		return this.districtId;
	}

	public void setDistrictId(Integer districtId) {
		this.districtId = districtId;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "events")
	public City getCities() {
		return this.cities;
	}

	public void setCities(City cities) {
		this.cities = cities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Userrole> getUserroleses() {
		return this.userroleses;
	}

	public void setUserroleses(Set<Userrole> userroleses) {
		this.userroleses = userroleses;
	}

	public boolean isEnabled() {
		return enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	public boolean isNonLocked() {
		return nonLocked;
	}

	public void setNonLocked(boolean nonLocked) {
		this.nonLocked = nonLocked;
	}
	
	public Set<Role> getRoles(){
		Set<Role> roles = new HashSet<>();
		RoleHome roleDAO = new RoleHome();
		for(Userrole userrole : getUserroleses()){
			roles.add(roleDAO.findById(userrole.getRoleId()));
		}
		return roles;
	}
	
}
